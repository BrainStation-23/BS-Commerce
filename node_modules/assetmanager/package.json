{
  "name": "assetmanager",
  "version": "1.1.2",
  "description": "Asset manager easily allows you to switch between development and production css and js files in your templates by managing them in a single json file that's still compatible with grunt cssmin and uglify.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ReedD/node-assetmanager"
  },
  "keywords": [
    "asset",
    "manager",
    "css",
    "js",
    "layout"
  ],
  "author": {
    "name": "Reed Dadoune",
    "email": "Reed@Dadoune.com",
    "url": "http://www.dadoune.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ReedD/node-assetmanager/issues"
  },
  "homepage": "https://github.com/ReedD/node-assetmanager",
  "dependencies": {
    "grunt": "^0.4.5",
    "underscore": "^1.6.0"
  },
  "readme": "[![NPM](https://nodei.co/npm/assetmanager.png?downloads=true)](https://nodei.co/npm/assetmanager/)\n\nnode-assetmanager\n=================\n\nAsset manager easily allows you to switch between development and production css\nand js files in your templates by managing them in a single json file that's\nstill compatible with grunt cssmin and uglify. A working demo/implimentation of\nthis can been seen in [MEAN Stack](https://github.com/linnovate/mean).\n\n\n##Usage\nTo use [assetmanager](https://www.npmjs.org/package/assetmanager), cd into your\nproject directory and install assetmanager with npm.\n\n\n```\n$ cd /to/project/directory\n$ npm install assetmanager --save\n```\n\nSetup an external json asset configuration file that holds your development and\nproduction css and js files. The format of this file can be in either\n[files object format](http://gruntjs.com/configuring-tasks#files-object-format),\nor [files array format](http://gruntjs.com/configuring-tasks#files-array-format).\n\nYou may also add external resources, however these entries should be 1-to-1 key value\npairs. External resources will not cause issues with grunt cssmin or uglify,\nthey will simply be treated as empty resources and thus ignored.\n\n###Files Object Format\n[Files object format](http://gruntjs.com/configuring-tasks#files-object-format)\nconsists of file groups (main, secondary, etc.) that contain file types (css,\njs).  Each file type has a destination file mapped to a list of files of which\nthe destination file is composed in production mode.\n\nIn the [assets file](#assets.json) below, the main js files might be passed\nto [grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify).  The\noutput from that Grunt task would be in \"public/build/js/main.min.js\" - in\nproduction mode, assetmanager will place that filename in the list of assets in\n_assets.main.js_.  In debug mode, assetmanager would flatten the lists of\njs source files, placing the flattened list in _assets.main.js_.  This makes\noriginal, uncompressed js source files available in the browser during\ndebugging.\n\n####assets.json\n\n```\n{\n\t\"main\": {\n\t\t\"css\": {\n\t\t\t\"public/build/css/main.min.css\": [\n\t\t\t\t\"public/lib/bootstrap/dist/css/bootstrap.css\",\n\t\t\t\t\"public/css/**/*.css\"\n\t\t\t]\n\t\t},\n\t\t\"js\": {\n\t\t\t\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js\": \"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore.js\",\n\t\t\t\"public/build/js/main.min.js\": [\n\t\t\t\t\"public/lib/angular/angular.js\",\n\t\t\t\t\"public/lib/angular-cookies/angular-cookies.js\",\n\t\t\t\t\"public/lib/angular-resource/angular-resource.js\",\n\t\t\t\t\"public/lib/angular-ui-router/release/angular-ui-router.js\",\n\t\t\t\t\"public/lib/angular-bootstrap/ui-bootstrap.js\",\n\t\t\t\t\"public/lib/angular-bootstrap/ui-bootstrap-tpls.js\",\n\t\t\t\t\"public/js/**/*.js\"\n\t\t\t]\n\t\t}\n\t},\n\t\"secondary\": {\n\t\t\"css\": {\n\t\t\t\"public/build/css/secondary.min.css\": [\n\t\t\t\t\"public/css/**/*.css\"\n\t\t\t]\n\t\t},\n\t\t\"js\": {\n\t\t\t\"public/build/js/secondary.min.js\": [\n\t\t\t\t\"public/js/**/*.js\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nThis way in your `gruntfile` you can easily import the same `assets.json` config\nfile and plop in the respective values for css and js.\n\n####gruntfile.js\n\n```\n'use strict';\n\nmodule.exports = function(grunt) {\n\t// Project Configuration\n\tgrunt.initConfig({\n\t\tassets: grunt.file.readJSON('config/assets.json'),\n\t\tuglify: {\n\t\t\tmain: {\n\t\t\t\toptions: {\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tcompress: true\n\t\t\t\t},\n\t\t\t\tfiles: '<%= assets.main.js %>'\n\t\t\t},\n\t\t\tsecondary: {\n\t\t\t\tfiles: '<%= assets.secondary.js %>'\n\t\t\t}\n\t\t},\n\t\tcssmin: {\n\t\t\tmain: {\n\t\t\t\tfiles: '<%= assets.main.css %>'\n\t\t\t},\n\t\t\tsecondary: {\n\t\t\t\tfiles: '<%= assets.secondary.css %>'\n\t\t\t}\n\t\t}\n\t});\n\n\t//Load NPM tasks\n\tgrunt.loadNpmTasks('grunt-contrib-cssmin');\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\n\t//Making grunt default to force in order not to break the project.\n\tgrunt.option('force', true);\n\n\t//Default task(s).\n\tgrunt.registerTask('default', ['cssmin', 'uglify']);\n\n};\n```\n\n###Files Array Format\n[Files array format](http://gruntjs.com/configuring-tasks#files-array-format)\nrequires that each file type be an object with \"src\" (string array or string)\nand \"dest\" (string) attributes.\n\nThis format allows configuring a single Grunt target with multiple destinations.\nFor example, perhaps you'd like to concatenate vendor minified css and js files\nin production.  Both sets should have their own destination file as illustrated\nin the assets configuration below with \"vendorCss\" and \"vendorJs\" file types.\n\n####assets.js - array format\n```\n{\n\t\"main\": {\n\t\t\"vendorCss\": {\n\t\t\t\"dest\": \"public/vendor_styles.min.css\",\n\t\t\t\"src\": [\n\t\t\t\t\"public/lib/bootstrap/dist/css/bootstrap.min.css\",\n\t\t\t\t\"public/lib/bootstrap/dist/css/bootstrap-theme.min.css\"\n\t\t\t]\n\t\t},\n\t\t\"vendorJs\": {\n\t\t\t\"dest\": \"public/lib.min.js\",\n\t\t\t\"src\": [\n\t\t\t\t\"public/lib/jquery/dist/jquery.min.js\",\n\t\t\t\t\"public/lib/bootstrap/dist/js/bootstrap.min.js\",\n\t\t\t\t\"public/lib/angular/angular.min.js\",\n\t\t\t\t\"public/lib/angular-resource/angular-resource.min.js\",\n\t\t\t\t\"public/lib/angular-cookies/angular-cookies.min.js\",\n\t\t\t\t\"public/lib/angular-ui-router/release/angular-ui-router.min.js\",\n\t\t\t\t\"public/lib/angular-bootstrap/ui-bootstrap-tpls.min.js\"\n\t\t\t]\n\t\t},\n\t\t\"publicCss\": {\n\t\t\t\"dest\": \"public/client_styles.min.css\",\n\t\t\t\"src\": [\n\t\t\t\t\"public/client/index/styles/common.css\"\n\t\t\t]\n\t\t},\n\t\t\"publicJs\": {\n\t\t\t\"dest\": \"public/client.min.js\",\n\t\t\t\"src\": [\n\t\t\t\t\"public/client/app.js\",\n\t\t\t\t\"public/client/**/*.js\",\n\t\t\t\t\"!public/client/init.js\",\n\t\t\t\t\"public/client/init.js\",\n\t\t\t\t\"!public/client/**/*Test.js\"\n\t\t\t]\n\t\t},\n\t\t\"underscore\": {\n\t\t\t\"dest\": \"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js\",\n\t\t\t\"src\": \"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore.js\"\n\t\t}\n\t}\n}\n```\n\n####gruntfile.js - array format\nNote here that file array format requires the _files_ attribute be a list of\nobjects from the assets configuration:\n\n```\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\t\tassets: grunt.file.readJSON('client/assets-faf.json'),\n\t\tconcat: {\n\t\t\toptions: {\n\t\t\t\tseparator: ';'\n\t\t\t},\n\t\t\tproduction: {\n\t\t\t\tfiles: [\n\t\t\t\t\t'<%= assets.main.vendorCss %>',\n\t\t\t\t\t'<%= assets.main.vendorJs %>'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tcssmin: {\n\t\t\toptions: {},\n\t\t\tproduction: {\n\t\t\t\tfiles: ['<%= assets.main.clientCss %>']\n\t\t\t}\n\t\t},\n\t\tuglify: {\n\t\t\toptions: {},\n\t\t\tproduction: {\n\t\t\t\tfiles: ['<%= assets.main.clientJs %>']\n\t\t\t}\n\t\t}\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-concat');\n\tgrunt.loadNpmTasks('grunt-contrib-cssmin');\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\n\tgrunt.registerTask('production', [\n\t\t'concat:production',\n\t\t'cssmin:production',\n\t\t'uglify:production'\n\t]);\n\n```\n\n### Node.js Configuration\nIn your node app require `assetmanager`, the example below is partial code\nfrom an express setup. Call `assetmanager.process` with your files from your\n`assets.json` config file. Set the `debug` value to toggle between your\ncompressed files and your development files. You can also set the `webroot`\nvalue so that when assetmanager processes your files it will change\n`public/lib/angular/angular.js` to `/lib/angular/angular.js` so that everything\nis relative to your webroot.\n\nFor the sake of efficiency, assetmanager should be configured after your static\nresources.\n\n#### Options\n* assets - An object containing the list of assets. Default: `{}`\n* debug - When true returns source assets rather than destination files. Default: `true`\n* webroot - Strip the webroot folder name from the file paths. Default: `false`\n* cachebust - Append a cache bust string to the end of the asset path. Default: `'local'`\n\t* `'local'` appends cache bust to local files only. \n\t* `'all'` appends cache bust to local and remote/cdn files.\n\t* `false` disables cache bust.\n\n```\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar express = require('express'),\n\tassetmanager = require('assetmanager');\n\nmodule.exports = function(app, passport, db) {\n\n\tapp.use(express.static(config.root + '/client'));\n\n\tapp.configure(function() {\n\t\t// Import your asset file\n\t\tvar assets = assetmanager.process({\n\t\t\tassets: require('./assets.json'),\n\t\t\tdebug: (process.env.NODE_ENV !== 'production'),\n\t\t\twebroot: 'public'\n\t\t});\n\t\t// Add assets to local variables\n\t\tapp.use(function (req, res, next) {\n\t\t\tres.locals({\n\t\t\t\tassets: assets\n\t\t\t});\n\t\t\tnext();\n\t\t});\n\n\t\t// ... Your CODE\n\n\t});\n\n\t// ... Your CODE\n\n};\n```\n\n#### Templates\nThen finally in your template you can output them with whatever templating\nframework you use. Using swig your main layout template might look something\nlike this:\n\n```\n{% for file in assets.main.css %}\n\t<link rel=\"stylesheet\" href=\"{{file}}\">\n{% endfor %}\n\n{% for file in assets.main.js %}\n\t<script type=\"text/javascript\" src=\"{{file}}\"></script>\n{% endfor %}\n```\n\nAnd in perhaps a secondary layout your second group of files:\n\n```\n{% for file in assets.secondary.css %}\n\t<link rel=\"stylesheet\" href=\"{{file}}\">\n{% endfor %}\n\n{% for file in assets.secondary.js %}\n\t<script type=\"text/javascript\" src=\"{{file}}\"></script>\n{% endfor %}\n```\n",
  "readmeFilename": "README.md",
  "_id": "assetmanager@1.1.2",
  "dist": {
    "shasum": "7a5b35c254940ba0a669caff6b04eb443ae07b10"
  },
  "_from": "assetmanager@1.1.2",
  "_resolved": "https://registry.npmjs.org/assetmanager/-/assetmanager-1.1.2.tgz"
}
