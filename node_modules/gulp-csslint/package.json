{
  "name": "gulp-csslint",
  "version": "0.1.5",
  "description": "CSSLint plugin for gulp",
  "main": "index.js",
  "dependencies": {
    "csslint": "^0.10.0",
    "event-stream": "^3.1.2",
    "gulp-util": "^3.0.0"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "should": "^3.3.1"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lazd/gulp-csslint.git"
  },
  "keywords": [
    "gulpplugin",
    "csslint"
  ],
  "author": {
    "name": "Larry Davis",
    "email": "lazdnet@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lazd/gulp-csslint/issues"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# gulp-csslint [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url]\n> CSSLint plugin for gulp 3\n\n## Usage\n\nFirst, install `gulp-csslint` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-csslint\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar csslint = require('gulp-csslint');\n\ngulp.task('css', function() {\n  gulp.src('client/css/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter());\n});\n```\n\n## API\n\n### csslint(ruleConfiguration)\n\n#### ruleConfiguration\nType: `Object`\n\nYou can pass rule configuration as an object. See the [list of rules by ID on the CSSLint wiki](https://github.com/stubbornella/csslint/wiki/Rules-by-ID) for valid rule IDs.\n\n```javascript\ngulp.src('client/css/*.css')\n  .pipe(csslint({\n    'shorthand': false\n  }))\n  .pipe(csslint.reporter());\n```\n\n### csslint(csslintrc)\n\n#### csslintrc\nType: `String`\n\nYou can also pass the path to your csslintrc file instead of a rule configuration object.\n\n```javascript\ngulp.src('client/css/*.css')\n  .pipe(csslint('csslintrc.json'))\n  .pipe(csslint.reporter());\n```\n\n## Results\n\nAdds the following properties to the file object:\n\n```javascript\nfile.csslint.success = true; // or false\nfile.csslint.errorCount = 0; // number of errors returned by CSSLint\nfile.csslint.results = []; // CSSLint errors\nfile.csslint.opt = {}; // The options you passed to CSSLint\n```\n\n## Custom Reporters\n\nCustom reporter functions can be passed as `cssline.reporter(reporterFunc)`. The reporter function will be called for each linted file and passed the file object as described above.\n\n```javascript\nvar csslint = require('gulp-csslint');\nvar gutil = require('gulp-util');\n\nvar customReporter = function(file) {\n  gutil.log(gutil.colors.cyan(file.csslint.errorCount)+' errors in '+gutil.colors.magenta(file.path));\n\n  file.csslint.results.forEach(function(result) {\n    gutil.log(result.error.message+' on line '+result.error.line);\n  });\n};\n\ngulp.task('lint', function() {\n  gulp.files('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.reporter(customReporter));\n});\n```\n\n[travis-url]: http://travis-ci.org/lazd/gulp-csslint\n[travis-image]: https://secure.travis-ci.org/lazd/gulp-csslint.png?branch=master\n[npm-url]: https://npmjs.org/package/gulp-csslint\n[npm-image]: https://badge.fury.io/js/gulp-csslint.png\n",
  "readmeFilename": "README.md",
  "_id": "gulp-csslint@0.1.5",
  "dist": {
    "shasum": "3880a68469d52ae37c7c4a1523baa4ea56735aa8"
  },
  "_from": "gulp-csslint@^0.1.5",
  "_resolved": "https://registry.npmjs.org/gulp-csslint/-/gulp-csslint-0.1.5.tgz"
}
