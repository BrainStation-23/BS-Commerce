scalar DateTime

type ProductInfo {
  name: String!
  shortDescription: String
  fullDescription: String
  sku: String!
  price: Int!
  oldPrice: Int!
  cost: Int!
  showOnHomePage: Boolean
  includeInTopMenu: Boolean
  allowToSelectPageSize: Boolean
  published: Boolean
  displayOrder: Int
  isFeatured: Boolean
  publishDate: DateTime
}

input ProductInfoInput {
  name: String!
  shortDescription: String
  fullDescription: String
  sku: String!
  price: Int!
  oldPrice: Int!
  cost: Int!
  showOnHomePage: Boolean
  includeInTopMenu: Boolean
  allowToSelectPageSize: Boolean
  published: Boolean
  displayOrder: Int
  isFeatured: Boolean
  publishDate: DateTime
}

input UpdateProductInfoInput {
  name: String
  shortDescription: String
  fullDescription: String
  sku: String
  price: Int
  oldPrice: Int
  cost: Int
  showOnHomePage: Boolean
  includeInTopMenu: Boolean
  allowToSelectPageSize: Boolean
  published: Boolean
  displayOrder: Int
  isFeatured: Boolean
}

type ProductMeta {
  keywords: [String]
  title: String
  description: String
  friendlyPageName: String!
}

input ProductMetaInput {
  keywords: [String]
  title: String
  description: String
  friendlyPageName: String!
}

input UpdateProductMetaInput {
  keywords: [String]
  title: String
  description: String
  friendlyPageName: String
}

type ProductPhoto {
  url: String
  id: String
  title: String
  alt: String
  displayOrder: Int
}

input ProductPhotoInput {
  url: String
  id: String
  title: String
  alt: String
  displayOrder: Int
}

type ProductCategories {
  id: String!
  isFeatured: Boolean
  displayOrder: Int
}

type ProductManufacture {
  id: String
  name: Boolean
}

input ProductManufactureInput {
  id: String
  name: Boolean
}

input ProductCategoriesInput {
  id: String!
  isFeatured: Boolean
  displayOrder: Int
}

input UpdateProductCategoriesInput {
  id: String
  isFeatured: Boolean
  displayOrder: Int
}

type Product {
  id: String!
  info: ProductInfo!
  meta: ProductMeta!
  tags: [String]
  photos: [ProductPhoto]
  brands: [String]
  manufacture: ProductManufacture
  categories: [ProductCategories!]!
}

input ProductInput {
  info: ProductInfoInput!
  meta: ProductMetaInput!
  tags: [String]
  photos: [ProductPhotoInput]
  brands: [String!]!
  manufacture: ProductManufactureInput
  categories: [ProductCategoriesInput!]!
}

input UpdateProductInput {
  info: UpdateProductInfoInput
  meta: UpdateProductMetaInput
  tags: [String]
  photos: [ProductPhotoInput]
  brands: [String]
  manufacture: ProductManufactureInput
  categories: [UpdateProductCategoriesInput]
}


input SearchCondition {
  skip: Int
  limit: Int
  brandId: String
  categoryId: String
  productName: String
  isFeatured: Boolean
  slug: String
  orderBy: String
}

type ProductArrayWithCount {
  products: [Product!]!
  count: Int!
}

input queryConditionInput {
  limit: Int
  skip: Int
}

input getProductBySKUParams {
  sku: String!
}

input getProductParams {
  productId: String!
}

input deleteProductParams {
  productId: String!
}

input updateProductParams {
  productId: String!
}

input updateProductsForBrandBody {
  productIds: [String!]!
  brandId: String!
}

type ProductResponse {
  error: String
  code: Int!
  data: Product
}

type ProductSuccessMessage {
  message: String!
}

type ProductDeletedResponse {
  error: String
  code: Int!
  data: ProductSuccessMessage
}

type ProductArrayResponse {
  error: String
  code: Int!
  data: [Product]
}

type ProductArrayWithCountResponse {
  error: String
  code: Int!
  data: ProductArrayWithCount
}

type Count {
  count: Int!
}

type ProductCount {
  error: String
  code: Int!
  data: Count!
}

type Query {
  getProduct(params: getProductParams!): ProductResponse!
  getAllProducts(query: queryConditionInput): ProductArrayResponse!
  getCustomerProduct(params: getProductParams!): ProductResponse!
  getCustomerAllProducts(query: SearchCondition): ProductArrayResponse!
  getProductCount: ProductCount!
  getProductBySKU(params: getProductBySKUParams!): ProductResponse!
  getProductsByCondition(
    condition: SearchCondition
  ): ProductArrayWithCountResponse!
}

type Mutation {
  addProduct(product: ProductInput): ProductResponse!
  deleteProduct(params: deleteProductParams!): ProductDeletedResponse!
  updateProduct(
    product: UpdateProductInput
    params: updateProductParams!
  ): ProductResponse!
  updateProductsForBrand(
    data: updateProductsForBrandBody!
  ): ProductArrayResponse!
}
