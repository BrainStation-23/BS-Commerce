scalar DateTime

type Info {
  name: String!
  shortDescription: String
  fullDescription: String
  sku: String!
  price: Int!
  oldPrice: Int!
  cost: Int!
  showOnHomePage: Boolean
  includeInTopMenu: Boolean
  allowToSelectPageSize: Boolean
  published: Boolean
  displayOrder: Int
  isFeatured: Boolean
  publishDate: DateTime
}

input InfoInput {
  name: String!
  shortDescription: String
  fullDescription: String
  sku: String!
  price: Int!
  oldPrice: Int!
  cost: Int!
  showOnHomePage: Boolean
  includeInTopMenu: Boolean
  allowToSelectPageSize: Boolean
  published: Boolean
  displayOrder: Int
  isFeatured: Boolean
  publishDate: DateTime
}

type Meta {
  keywords: [String]
  title: String
  description: String
  friendlyPageName: String!
}

input MetaInput {
  keywords: [String]
  title: String
  description: String
  friendlyPageName: String!
}

type Photo {
  id: String
  title: String
  alt: String
  displayOrder: Int
}

input PhotoInput {
  id: String
  title: String
  alt: String
  displayOrder: Int
}

type Categories {
  categoryId: String!
  isFeatured: Boolean
  displayOrder: Int
}

input CategoriesInput {
  categoryId: String!
  isFeatured: Boolean
  displayOrder: Int
}

type Product {
  id: String!
  info: Info!
  meta: Meta!
  tags: [String]
  photos: [Photo]
  brands: [String]
  categories: [Categories!]!
}

input ProductInput {
  info: InfoInput!
  meta: MetaInput!
  tags: [String]
  photos: [PhotoInput]
  brands: [String]
  categories: [CategoriesInput!]!
}

type ProductResponse {
  error: String
  code: Int!
  data: Product!
}

type ProductArrayResponse {
  error: String
  code: Int!
  data: [Product!]!
}

type Query {
  getProduct(productId: String!): ProductResponse!
  getAllProducts: ProductArrayResponse!
}

type Mutation {
  createProduct(product: ProductInput!): ProductResponse!
}
